snippet sdoc
#include <stdio.h>
#include <stdint.h>

int main(void) {
	$0
	return 0;
}
endsnippet

snippet readint
void read_$1(FILE *__restrict stream, $1 *__restrict nr) {
	uint8_t ch;
	*nr = 0;
	while ((ch = fgetc(stream)) && ('0' <= ch && ch <= '9')) {
		*nr *= 10;
		*nr += ch - '0';
	}
	if (ch == '\r') {
		fgetc(stream);
	}
}
endsnippet

snippet readinti
void read_$1(FILE *__restrict stream, $1 *__restrict nr) {
	uint8_t ch;
	int8_t sgn = 1;
	*nr = 0;
	ch = fgetc(stream);
	if (ch == '-') {
		sgn = -1;
	} else if (('0' <= ch && ch <= '9')) {
		*nr = ch - '0';
	} else {
		return;
	}
	while ((ch = fgetc(stream)) && ('0' <= ch && ch <= '9')) {
		*nr *= 10;
		*nr += ch - '0';
	}
	if (ch == '\r') {
		fgetc(stream);
	}
	*nr *= sgn;
}
endsnippet

snippet for
{
	int32_t $1;
	for($1 = 0; $1 < $2; ++$1) {
		$0
	}
}
endsnippet

snippet ff
{
	int32_t $1, $3;
	for ($1 = 0; $1 < $2; ++$1) {
		for ($3 = 0; $3 < $4; ++$3) {
			$0
		}
	}
}
endsnippet

snippet include
#include <$1>$0
endsnippet

snippet bitset "Add bitset functionality"
typedef uint8_t bitset;
void __inline__ bits_set(bitset *bs, uint32_t pos) {
	bs[pos/8]|=(1<<(pos%8));
}

uint8_t __inline__ bits_get(bitset *bs, uint32_t pos) {
	return (bs[pos/8]>>(pos%8)) & 1;
}$0
endsnippet

snippet *_r "*__restrict"
*__restrict $0
endsnippet

snippet maxf "Max Function"
$1 __inline__ __attribute((pure)) max($1 o1, $1 o2) {
	return o1 > o2 ? o1 : o2;
}$0
endsnippet

snippet minf "Min Function"
$1 __inline__ __attribute((pure)) min($1 o1, $1 o2) {
	return o1 < o2 ? o1 : o2;
}$0
endsnippet

snippet lpow "Logarithmic Exponentiation"
$1 lpow($1 b, $1 exp) {
  $1 r = 1;
  if (exp == 0) {
    return r;
  }
  while (exp != 0) {
    if ((exp & 1) == 1) {
      r *= b;
    }
    exp >>= 1;
    b *= b;
  }
	if (r == 0) {
		return -1;
	}
  return r;
}$0
endsnippet

snippet lpowm "Logarithmic Exponentiation With Modulo"
$1 lpowm($1 b, $1 exp, $1 mod) {
  $1 r = 1;
  b %= mod;
  if (exp == 0) {
    return r;
  }
  while (exp != 0) {
    if ((exp & 1) == 1) {
      r *= b;
      r %= mod;
    }
    exp >>= 1;
    b *= b;
    b %= mod;
  }
  if (r == 0) {
    return -1;
  }
  return r;
}$0
endsnippet

snippet nth "Nth root of a number, rounded down to nearest int"
$1 nroot($1 nr, $1 n) {
  if (n == 0) {
    return 0;
  }
  if (n == 1) {
    return nr;
  }
  $1 v = 1, bit, tp, t;
  tp = lpow(v, n);

  while (tp < nr) {
    v <<= 1;
    tp = lpow(v, n);
  }

  if (tp == nr) {
    return v;
  }

  v >>= 1;
  bit = v >> 1;
  tp = lpow(v, n);
  while (nr > tp) {
    v += bit;
    t = lpow(v, n);
    if (t > nr) {
      v -= bit;
    } else {
      tp = t;
    }
    if ((bit >>= 1) == 0) {
      break;
    }
  }
  return v;
}$0
endsnippet

snippet bsearch "Not sure if it works"
$1 bsrc($1 *__restrict vec, $1 lbound, $1 ubound, $1 threshold) {
  $1 cpos;
  $1 answer = lbound;
  while (lbound <= ubound) {
    cpos = (ubound + lbound) / 2;
    if (vec[cpos] <= threshold) {
      answer = cpos;
      lbound = cpos + 1;
    } else {
      ubound = cpos - 1;
    }
  }
  return answer;
}$0
endsnippet

snippet file "Read/Write template"
{
	FILE *__restrict $1 = fopen("$2", "$3");

	$0

	fclose($1);
}
endsnippet

snippet ciurf "Erathostene's sieve"
void mkciur(bitset *__restrict vec, $1 lim) {
  $1 i, j;
  $1 sqlim = sqrt(lim);
  bits_set(vec, 0);
  bits_set(vec, 1);
  for(i = 4; i <= lim; i+=2) {
    bits_set(vec, i);
  }
  for(i = 9; i <= lim; i+=3) {
    bits_set(vec, i);
  }
  for(i = 1; (6*i-1) <= sqlim; ++i) {
    if (bits_get(vec,6*i-1) == 0) {
      for(j = 36*(i*i) - 12*i + 1; j <= lim; j += (12*i-2)) { // (6i-1)^2 
        bits_set(vec, j);
      }
    }
    if ((6*i+1) <= sqlim && bits_get(vec,6*i+1) == 0) {
      for(j = 36*(i*i) + 12*i + 1; j <= lim; j += (12*i+2)) { // (6i+1)^2 
        bits_set(vec, j);
      }
    }
  }
}
endsnippet

snippet gcdf "Greatest common divisor"
$1 gcd($1 o1, $1 o2) {
  $1 t;
  while (o2 != 0) {
    t = o2;
    o2 = o1 % o2;
    o1 = t;
  }
  return o1;
}$0
endsnippet

snippet lcmf "Least common multiple"
$1 lcm($1 o1, $1 o2) {
  return o1 * o2 / gcd(o1, o2);
}
endsnippet

snippet queue "Queue boilerplate"
struct queue {
  $1 q[$2];
  $1 st;
  $1 ed;
};

struct queue q;

void pop(struct queue *__restrict q) {
  ++q->st;
}

$1 top(struct queue *__restrict q) {
  return q->q[q->st];
}

void push(struct queue *__restrict q, $1 val) {
  q->q[q->ed] = val;
  ++q->ed;
}
endsnippet

snippet msbf "Most significant bit"
$1 msb($1 nr) {
    nr |= nr >> 1;
    nr |= nr >> 2;
    nr |= nr >> 4; 
    nr |= nr >> 8; /** 16 bit only **/
    nr |= nr >> 16; /** 32 bit only **/
    /** nr |= nr >> 32; **//** 64 bit only **/
    nr += 1;
    return (nr >> 1);
}$0
endsnippet

snippet stack "Stack boilerplate"
struct stack {
  $1 v[$2];
  uint32t vl;
};
$1 top(struct stack *__restrict s) {
  return s->v[s->vl-1];
}
void pop(struct stack *__restrict s) {
    --s->vl;
}
void push(struct stack *__restrict s, $1 val) {
  s->v[s->vl] = val;
  ++s->vl;
}
endsnippet

snippet fsumdivston "Sum of divisors of all numbers from 1 to n"
$1 sum_all_divisors($1 num)
{
    $1 sum = 0;
		$1 i;
		$1 sqn = sqrt(num);
    for (i = 1; i <= sqn; ++i{
        $1 t1 = i * (num / i - i + 1);
        $1 t2 = (((num / i) * (num / i + 1)) / 2) - ((i * (i + 1)) / 2);
        sum += t1 + t2;
    }
    return sum;
}
endsnippet

snippet vecf "Dynamic vector"
struct vec {
  size_t mlen;
  size_t clen;
  $1 *__restrict v;
};

void vpush(struct vec *__restrict v, $1 val) {
  if (v->clen == v->mlen) {
    v->mlen *= 2;
    v->v = realloc(v->v, (v->mlen) * sizeof(v->v[0]));
  }
  v->v[v->clen] = val;
  ++v->clen;
}

struct vec initv(size_t len) {
  struct vec res = {0};
  res.mlen = len;
  res.v = malloc(len * sizeof(res.v[0]));
  return res;
}
endsnippet

snippet cmpf
int cmp(const void *o1, const void *o2) { /// `>` means ascending; `<` means descending
  return (*($1 *)o1) $2 (*($1 *)o2);
}$0
endsnippet

snippet ephi
$1 ephi($1 x) {
  $1 sqx = sqrt(x);
  $1 res = x;
  int32_t i;
  for(i = 2; i <= sqx; ++i) {
    if (x % i == 0) {
      while (x % i == 0) {
        x /= i;
      }
      res -= res / i;
    }
  }
  if (x != 1) {
    res -= res / x;
  }
  return res;
}$0
endsnippet

snippet rmq
$1 rmq[17][$2];
uint8_t l[$2];

void build_rmq(uint32_t x) {
  int32_t i, j;
  uint32_t cp = 0;
  for(i = 1; i <= 16; ++i) {
    cp = 1 << (i - 1);
    for(j = cp; j < x; ++j) {
      rmq[i][j] = gcd(rmq[i-1][j], rmq[i-1][j-cp]);
    }
  }
}

void build_log(uint32_t x) {
  l[0] = 0;
  l[1] = 0;
  int32_t i;
  for(i = 2; i <= x; ++i) {
    l[i] = l[i>>1] + 1;
  }
}

$1 grmq($1 x, $1 y) {
  $1 dif = y - x + 1;
  return gcd(rmq[l[dif]][y], rmq[l[dif]][x + (1 << l[dif]) - 1]);
}
endsnippet

snippet pure
__attribute((pure))$0
endsnippet

snippet manacher
#define KBASE 257
uint64_t kp[$3 + 1];
void build_kp() {
  int32_t i;

  kp[0] = KBASE;
  for(i = 1; i <= $3; ++i) {
    kp[i] = kp[i - 1] * kp[i - 1];
  }
}

int64_t prefHash[$2], suffHash[$2];
void manacher($1 *__restrict v, uint32_t *__restrict res, uint32_t vl) {
  int32_t i;

  prefHash[0] = v[0];
  for (i = 1; i < vl; ++i) {
    prefHash[i] = prefHash[i - 1] * KBASE + v[i];
  }
  suffHash[vl] = 0;
  for (i = vl - 1; i >= 0; --i) {
    suffHash[i] = suffHash[i + 1] * KBASE + v[i];
  }

  int32_t x, y, lg, step;
  int64_t bs;
  int64_t h1, h2;
  for (i = 0; i < vl; ++i) {
    res[i] = 0;
    x = i; /** i, i + 1 for 12344321; i, i for 1234321 **/
    y = i + 1;
    lg = $3;
    for(step = (1 << $3); step > 0; step >>= 1) {
      bs = kp[lg];
      --lg;
      if(x - step < 0 || y + step >= vl) {
        continue;
      }
      
      h1 = prefHash[x] - bs * prefHash[x - step];
      h2 = suffHash[y] - bs * suffHash[y + step];
      if(h1 == h2) {
        x -= step;
        y += step;
        res[i] += step;
      }
    }
  }
}$0
endsnippet

snippet cfile
{
	FILE *__restrict in;
#ifdef ONLINE_JUDGE
		in = stdin;
#else
		in = fopen("in", "r");
#endif

	$0

	fclose(in);
}
endsnippet
